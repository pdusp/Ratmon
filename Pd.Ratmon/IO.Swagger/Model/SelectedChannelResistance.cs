/* 
 * API Ratmon
 *
 * API Ratmon
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: serwis@ratmon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
//using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SelectedChannelResistance
    /// </summary>
    [DataContract]
        public partial class SelectedChannelResistance :  IEquatable<SelectedChannelResistance>, IValidatableObject
    {
        /// <summary>
        /// Defines R1State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum R1StateEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 1,
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 2,
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 3,
            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            NUMBER_4 = 4,
            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            NUMBER_8 = 5        }
        /// <summary>
        /// Gets or Sets R1State
        /// </summary>
        [DataMember(Name="R1_State", EmitDefaultValue=false)]
        public R1StateEnum? R1State { get; set; }
        /// <summary>
        /// Defines R2State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum R2StateEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 1,
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 2,
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 3,
            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            NUMBER_4 = 4,
            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            NUMBER_8 = 5        }
        /// <summary>
        /// Gets or Sets R2State
        /// </summary>
        [DataMember(Name="R2_State", EmitDefaultValue=false)]
        public R2StateEnum? R2State { get; set; }
        /// <summary>
        /// Defines RLoopState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RLoopStateEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 1,
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 2,
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 3,
            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            NUMBER_4 = 4,
            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            NUMBER_8 = 5        }
        /// <summary>
        /// Gets or Sets RLoopState
        /// </summary>
        [DataMember(Name="RLoop_State", EmitDefaultValue=false)]
        public RLoopStateEnum? RLoopState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SelectedChannelResistance" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="date">date.</param>
        /// <param name="r1">r1.</param>
        /// <param name="r1V">r1V.</param>
        /// <param name="r1State">r1State.</param>
        /// <param name="r2">r2.</param>
        /// <param name="r2V">r2V.</param>
        /// <param name="r2State">r2State.</param>
        /// <param name="rLoop">rLoop.</param>
        /// <param name="rLoopV">rLoopV.</param>
        /// <param name="rLoopState">rLoopState.</param>
        public SelectedChannelResistance(int? id = default(int?), string date = default(string), string r1 = default(string), string r1V = default(string), R1StateEnum? r1State = default(R1StateEnum?), string r2 = default(string), string r2V = default(string), R2StateEnum? r2State = default(R2StateEnum?), string rLoop = default(string), string rLoopV = default(string), RLoopStateEnum? rLoopState = default(RLoopStateEnum?))
        {
            this.Id = id;
            this.Date = date;
            this.R1 = r1;
            this.R1V = r1V;
            this.R1State = r1State;
            this.R2 = r2;
            this.R2V = r2V;
            this.R2State = r2State;
            this.RLoop = rLoop;
            this.RLoopV = rLoopV;
            this.RLoopState = rLoopState;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets R1
        /// </summary>
        [DataMember(Name="R1", EmitDefaultValue=false)]
        public string R1 { get; set; }

        /// <summary>
        /// Gets or Sets R1V
        /// </summary>
        [DataMember(Name="R1_V", EmitDefaultValue=false)]
        public string R1V { get; set; }


        /// <summary>
        /// Gets or Sets R2
        /// </summary>
        [DataMember(Name="R2", EmitDefaultValue=false)]
        public string R2 { get; set; }

        /// <summary>
        /// Gets or Sets R2V
        /// </summary>
        [DataMember(Name="R2_V", EmitDefaultValue=false)]
        public string R2V { get; set; }


        /// <summary>
        /// Gets or Sets RLoop
        /// </summary>
        [DataMember(Name="RLoop", EmitDefaultValue=false)]
        public string RLoop { get; set; }

        /// <summary>
        /// Gets or Sets RLoopV
        /// </summary>
        [DataMember(Name="RLoop_V", EmitDefaultValue=false)]
        public string RLoopV { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SelectedChannelResistance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  R1: ").Append(R1).Append("\n");
            sb.Append("  R1V: ").Append(R1V).Append("\n");
            sb.Append("  R1State: ").Append(R1State).Append("\n");
            sb.Append("  R2: ").Append(R2).Append("\n");
            sb.Append("  R2V: ").Append(R2V).Append("\n");
            sb.Append("  R2State: ").Append(R2State).Append("\n");
            sb.Append("  RLoop: ").Append(RLoop).Append("\n");
            sb.Append("  RLoopV: ").Append(RLoopV).Append("\n");
            sb.Append("  RLoopState: ").Append(RLoopState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SelectedChannelResistance);
        }

        /// <summary>
        /// Returns true if SelectedChannelResistance instances are equal
        /// </summary>
        /// <param name="input">Instance of SelectedChannelResistance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SelectedChannelResistance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.R1 == input.R1 ||
                    (this.R1 != null &&
                    this.R1.Equals(input.R1))
                ) && 
                (
                    this.R1V == input.R1V ||
                    (this.R1V != null &&
                    this.R1V.Equals(input.R1V))
                ) && 
                (
                    this.R1State == input.R1State ||
                    (this.R1State != null &&
                    this.R1State.Equals(input.R1State))
                ) && 
                (
                    this.R2 == input.R2 ||
                    (this.R2 != null &&
                    this.R2.Equals(input.R2))
                ) && 
                (
                    this.R2V == input.R2V ||
                    (this.R2V != null &&
                    this.R2V.Equals(input.R2V))
                ) && 
                (
                    this.R2State == input.R2State ||
                    (this.R2State != null &&
                    this.R2State.Equals(input.R2State))
                ) && 
                (
                    this.RLoop == input.RLoop ||
                    (this.RLoop != null &&
                    this.RLoop.Equals(input.RLoop))
                ) && 
                (
                    this.RLoopV == input.RLoopV ||
                    (this.RLoopV != null &&
                    this.RLoopV.Equals(input.RLoopV))
                ) && 
                (
                    this.RLoopState == input.RLoopState ||
                    (this.RLoopState != null &&
                    this.RLoopState.Equals(input.RLoopState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.R1 != null)
                    hashCode = hashCode * 59 + this.R1.GetHashCode();
                if (this.R1V != null)
                    hashCode = hashCode * 59 + this.R1V.GetHashCode();
                if (this.R1State != null)
                    hashCode = hashCode * 59 + this.R1State.GetHashCode();
                if (this.R2 != null)
                    hashCode = hashCode * 59 + this.R2.GetHashCode();
                if (this.R2V != null)
                    hashCode = hashCode * 59 + this.R2V.GetHashCode();
                if (this.R2State != null)
                    hashCode = hashCode * 59 + this.R2State.GetHashCode();
                if (this.RLoop != null)
                    hashCode = hashCode * 59 + this.RLoop.GetHashCode();
                if (this.RLoopV != null)
                    hashCode = hashCode * 59 + this.RLoopV.GetHashCode();
                if (this.RLoopState != null)
                    hashCode = hashCode * 59 + this.RLoopState.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
