/* 
 * API Ratmon
 *
 * API Ratmon
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: serwis@ratmon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
 

namespace IO.Swagger.Model
{
    /// <summary>
    /// AllCircuits
    /// </summary>
    [DataContract]
        public partial class AllCircuits :  IEquatable<AllCircuits>, IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StateEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 1,
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 2,
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 3,
            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            NUMBER_4 = 4,
            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            NUMBER_8 = 5        }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AllCircuits" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="localization">localization.</param>
        /// <param name="number">number.</param>
        /// <param name="state">state.</param>
        /// <param name="channels">channels.</param>
        /// <param name="detector">detector.</param>
        public AllCircuits(int? id = default(int?), string localization = default(string), int? number = default(int?), StateEnum? state = default(StateEnum?), List<AllCircuitsChannels> channels = default(List<AllCircuitsChannels>), AllCircuitsDetector detector = default(AllCircuitsDetector))
        {
            this.Id = id;
            this.Localization = localization;
            this.Number = number;
            this.State = state;
            this.Channels = channels;
            this.Detector = detector;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Localization
        /// </summary>
        [DataMember(Name="Localization", EmitDefaultValue=false)]
        public string Localization { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public int? Number { get; set; }


        /// <summary>
        /// Gets or Sets Channels
        /// </summary>
        [DataMember(Name="Channels", EmitDefaultValue=false)]
        public List<AllCircuitsChannels> Channels { get; set; }

        /// <summary>
        /// Gets or Sets Detector
        /// </summary>
        [DataMember(Name="Detector", EmitDefaultValue=false)]
        public AllCircuitsDetector Detector { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AllCircuits {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Localization: ").Append(Localization).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  Detector: ").Append(Detector).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllCircuits);
        }

        /// <summary>
        /// Returns true if AllCircuits instances are equal
        /// </summary>
        /// <param name="input">Instance of AllCircuits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllCircuits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Localization == input.Localization ||
                    (this.Localization != null &&
                    this.Localization.Equals(input.Localization))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Channels == input.Channels ||
                    this.Channels != null &&
                    input.Channels != null &&
                    this.Channels.SequenceEqual(input.Channels)
                ) && 
                (
                    this.Detector == input.Detector ||
                    (this.Detector != null &&
                    this.Detector.Equals(input.Detector))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Localization != null)
                    hashCode = hashCode * 59 + this.Localization.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Channels != null)
                    hashCode = hashCode * 59 + this.Channels.GetHashCode();
                if (this.Detector != null)
                    hashCode = hashCode * 59 + this.Detector.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
